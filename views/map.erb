<!DOCTYPE html>
<meta charset="utf-8">
<style>

body {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  margin: auto;
  position: relative;
  width: 960px;
}

form {
  position: absolute;
  right: 10px;
  top: 10px;
}

.node {
  border: solid 1px white;
  font: 14px sans-serif;
  overflow: hidden;
  position: absolute;
  text-indent: 2px;
}

</style>
<form>
</form>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

var margin = {top: 40, right: 10, bottom: 10, left: 10},
    width = 1600 - margin.left - margin.right,
    height = 768 - margin.top - margin.bottom;

var statusValues = function(doneValue, inTestValue, inProgressValue, notStartedValue, notEstimatedValue) {
  return {
    "done": doneValue,
    "in test": inTestValue,
    "in progress": inProgressValue,
    "not started": notStartedValue,
    "not estimated": notEstimatedValue
  }
}

var byStatus = function(a, b) {
  var ordering = statusValues(5, 4, 3, 2, 1);
  return ordering[b.name] - ordering[a.name];
}

var treemap = d3.layout.treemap()
    .size([width, height])
    .mode("<%= @map_mode %>")
    .sort(byStatus)
    .value(function(d) { return d.size; });

var div = d3.select("body").append("div")
    .style("position", "relative")
    .style("width", (width + margin.left + margin.right) + "px")
    .style("height", (height + margin.top + margin.bottom) + "px")
    .style("left", margin.left + "px")
    .style("top", margin.top + "px");

d3.json("/<%= @phase %>.json", function(error, root) {
  var node = div.datum(root).selectAll(".node")
      .data(treemap.nodes)
    .enter().append("div")
      .attr("class", "node")
      .style("left", function(d) { return d.x + "px"; })
      .style("top", function(d) { return d.y + "px"; })
      .style("width", function(d) { return Math.max(0, d.dx - 1) + "px"; })
      .style("height", function(d) { return Math.max(0, d.dy - 1) + "px"; })
      .style("background", nodeColor)
      .text(function(d) { return d.children || false === <%= @captions %> ? null : d.name; });
});

function nodeColor(d) {
  if(d.risk === "Yes"){
         return "Red"
    }
  var colors = statusValues(<%= @color_scheme %>);

var result = d.children ? colors[d.name.toLowerCase()] : null;
      return result;
    }

</script>
